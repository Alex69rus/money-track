name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: alex69rus/money-track/frontend
  BACKEND_IMAGE_NAME: alex69rus/money-track/backend

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint --if-present
    
    - name: Build frontend
      run: npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'https://localhost/api' }}
        REACT_APP_AI_WEBHOOK_URL: ${{ secrets.REACT_APP_AI_WEBHOOK_URL || 'https://localhost/webhook' }}
        DISABLE_ESLINT_PLUGIN: true

  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build backend
      run: dotnet build --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal

  build-and-push:
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: alex69rus
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ matrix.service == 'frontend' && env.FRONTEND_IMAGE_NAME || env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          ${{ matrix.service == 'frontend' && format('REACT_APP_API_URL={0}', secrets.REACT_APP_API_URL) || '' }}
          ${{ matrix.service == 'frontend' && format('REACT_APP_AI_WEBHOOK_URL={0}', secrets.REACT_APP_AI_WEBHOOK_URL) || '' }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e  # Exit on any error
          set -u  # Exit on undefined variables
          set -o pipefail  # Exit on pipe failures
          
          # Navigate to deployment directory
          cd /opt/money-track
          
          # Update repository safely without removing files
          if [ -d ".git" ]; then
            echo "Updating existing repository..."
            git fetch origin || { echo "ERROR: Failed to fetch from origin"; exit 1; }
            git reset --hard origin/main || { echo "ERROR: Failed to reset to origin/main"; exit 1; }
          else
            echo "Initializing new repository..."
            git init || { echo "ERROR: Failed to initialize git repository"; exit 1; }
            git remote add origin https://github.com/${{ github.repository }}.git || { echo "ERROR: Failed to add remote origin"; exit 1; }
            git fetch origin || { echo "ERROR: Failed to fetch from origin"; exit 1; }
            git reset --hard origin/main || { echo "ERROR: Failed to reset to origin/main"; exit 1; }
            git branch --set-upstream-to=origin/main main || { echo "ERROR: Failed to set upstream branch"; exit 1; }
          fi
          
          # Verify critical files exist
          if [ ! -f "docker-compose.prod.yml" ]; then
            echo "ERROR: docker-compose.prod.yml not found after git checkout"
            ls -la
            exit 1
          fi
          echo "✅ Repository updated successfully"
          
          # Create production environment file
          cat > .env.prod << EOF
          POSTGRES_DB=moneytrack
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          BACKEND_IMAGE=ghcr.io/alex69rus/money-track/backend:latest
          FRONTEND_IMAGE=ghcr.io/alex69rus/money-track/frontend:latest
          DOMAIN=${{ secrets.DOMAIN || 'localhost' }}
          EMAIL=${{ secrets.EMAIL || 'admin@localhost.com' }}
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          REACT_APP_AI_WEBHOOK_URL=${{ secrets.REACT_APP_AI_WEBHOOK_URL }}
          N8N_ENCRYPTION_KEY=${{ secrets.N8N_ENCRYPTION_KEY || 'default-encryption-key-change-me' }}
          EOF
          
          # Login to container registry
          echo "Logging in to container registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u alex69rus --password-stdin || { echo "ERROR: Failed to login to container registry"; exit 1; }
          echo "✅ Logged in successfully"
          
          # Pull latest images
          echo "Pulling latest Docker images..."
          docker pull ghcr.io/alex69rus/money-track/frontend:latest || { echo "ERROR: Failed to pull frontend image"; exit 1; }
          docker pull ghcr.io/alex69rus/money-track/backend:latest || { echo "ERROR: Failed to pull backend image"; exit 1; }
          echo "✅ Images pulled successfully"
          
          # Stop existing services (allow this to fail for first-time deployment)
          echo "Stopping existing services..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod down || echo "No existing services to stop"
          
          # Create SSL certificate directory and deploy Cloudflare certificates
          echo "Setting up Cloudflare Origin Certificates..."
          mkdir -p ssl
          echo "${{ secrets.CLOUDFLARE_CERT }}" > ssl/cloudflare-cert.pem || { echo "ERROR: Failed to create certificate file"; exit 1; }
          echo "${{ secrets.CLOUDFLARE_KEY }}" > ssl/cloudflare-key.pem || { echo "ERROR: Failed to create private key file"; exit 1; }
          chmod 600 ssl/cloudflare-key.pem
          echo "✅ Cloudflare certificates deployed"
          
          # Start services
          echo "Starting services with Cloudflare SSL..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d || { echo "ERROR: Failed to start services"; exit 1; }
          echo "✅ Services started successfully"
          
          # Wait for services to be ready
          echo "Waiting for services to initialize..."
          sleep 30
          
          # Verify services are running
          echo "Verifying services are running..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod ps || { echo "ERROR: Failed to check service status"; exit 1; }
          
          # Health check
          echo "Performing health checks..."
          if curl -f http://localhost/health >/dev/null 2>&1 || curl -f http://localhost/api/health >/dev/null 2>&1; then
            echo "✅ Health check passed"
          else
            echo "⚠️  Health check failed - services may still be starting up"
            # Don't fail deployment on health check failure as services might still be initializing
          fi
          
          # Clean up old images
          echo "Cleaning up old Docker images..."
          docker image prune -f || echo "⚠️  Failed to clean up old images"
          
          echo "🎉 Deployment completed successfully"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "✅ Deployment successful"
        else
          echo "❌ Deployment failed"
        fi