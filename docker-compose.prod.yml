services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-moneytrack}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - backend

  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/alex69rus/money-track/backend:latest}
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB:-moneytrack};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - Telegram__BotToken=${TELEGRAM_BOT_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
      - frontend

  frontend:
    image: ${FRONTEND_IMAGE:-ghcr.io/alex69rus/money-track/frontend:latest}
    restart: unless-stopped
    networks:
      - frontend

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl/:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - frontend


volumes:
  postgres_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge